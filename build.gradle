buildscript {
    ext {
        springBootVersion = '2.0.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.18.0"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE"
    }
}

plugins {
    id  'java'
    id 'eclipse'
    id 'idea'
    id 'io.spring.dependency-management' version '1.0.4.RELEASE'
    id 'com.palantir.docker' version '0.18.0'
    id 'com.github.hierynomus.license' version '0.14.0'

}
apply plugin: "org.springframework.boot"

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-netflix:2.0.0.RC2'
    }
}

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

dependencies {
    compile "org.springframework.boot:spring-boot"
    compile 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
}

jar {
    baseName = project.name.toLowerCase()
    version = project.version
}

processResources {
    filesMatching("**/*.properties") {
        expand(project.properties)
    }
}

group = 'com.matt'

sourceCompatibility = 1.8
targetCompatibility = 1.8

task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
}

task initialiseParameters {

    if(project.hasProperty('serviceVersion')){
        println "Creating Jar with version "+ serviceVersion
        jar.setProperty('version',serviceVersion)
        project.version = serviceVersion
    }else{
        println "Using default version of " + ":" + jar['version']
    }

    build.dependsOn initialiseParameters

}

license {


	header rootProject.file('LICENSE-COPYRIGHT.md')
	excludes(["**/*.xml", "**/*.properties"])
	//ignoreFailures = true;

}

downloadLicenses {
	ext.apacheTwo = license('Apache License, Version 2.0', 'http://opensource.org/licenses/Apache-2.0')

	aliases = [
			(apacheTwo) : ['The Apache Software License, Version 2.0', 'Apache 2', 'Apache License Version 2.0', 'Apache License, Version 2.0', 'Apache License 2.0', license('Apache License', 'http://www.apache.org/licenses/LICENSE-2.0')]
	]

	includeProjectDependencies = true;
	dependencyConfiguration = 'runtime';

}

docker {

    String buildName = jar.getProperties()['baseName'].toString().toLowerCase()
    String buildVersion = jar.getProperties()['version']

    String imageName = "mjevans" + "/" +buildName
    System.out.println("Creating image is " +imageName + " with tags 'latest' and "+buildVersion);
    name imageName

    String executablesToPackage = "build/libs/"+buildName+"-"+buildVersion + ".jar"
    files executablesToPackage


    dockerfile file('DockerFile')
    buildArgs([
            BUILD_NAME: buildName,
            BUILD_VERSION:buildVersion,
            PORT:project.port
    ])

    tags buildVersion
    noCache true

}
